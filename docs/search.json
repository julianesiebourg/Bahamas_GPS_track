[
  {
    "objectID": "TrackOverview.html",
    "href": "TrackOverview.html",
    "title": "Bahamas Sailing GPS track summary",
    "section": "",
    "text": "Navionics GPs track of the Bahamals Exhuma island trip.\n\nHideTrack loading and data formatting\n\n\n\n\n\nThe xml file with the navionics tracks is parsed.\n\nCoordinates, time and speed are extracted.\nSpeed is converted from m/s to knots\nDistance is calculated from thinned 1min segment data for the total distance and cumulative per day\nCOG is calculated as consecutive bearings from a thinned 10min segment dataset\n\n\n\nCode\ngpx_parsed &lt;- htmlTreeParse(file = \"ConsuelaFull.GPX\", useInternalNodes = TRUE)\n\nwaypoints &lt;- xpathSApply(doc = gpx_parsed, path = \"//wpt\", fun = xmlAttrs)\nwpt_date_time &lt;- xpathSApply(doc = gpx_parsed, path = \"//wpt/time\", fun = xmlValue)\nwpt_df &lt;- data.frame(date_time = wpt_date_time, t(waypoints))\n\n# filtered file\ngpx_parsed_filter &lt;- htmlTreeParse(file = \"ConsuelaFullEdited.GPX\", useInternalNodes = TRUE)\n\ncoords &lt;- t(xpathSApply(doc = gpx_parsed_filter, path = \"//trkpt\", fun = xmlAttrs))\ndate_time &lt;- xpathSApply(doc = gpx_parsed_filter, path = \"//trkpt/time\", fun = xmlValue)\n# speed &lt;- xpathSApply(doc = gpx_parsed_filter, path = \"//trkpt/extensions/navionics_speed\", fun = xmlValue)\n# elevation &lt;- xpathSApply(doc = gpx_parsed_filter, path = \"//trkpt/ele\", fun = xmlValue)\n\nsmoothing_window &lt;- \"30 sec\"\n\ndf &lt;- data.frame(\n  lat = as.numeric(coords[, \"lat\"]),\n  lon = as.numeric(coords[, \"lon\"]),\n  time = lubridate::ymd_hms(date_time)\n  #kts = as.numeric(speed) * 1.944,\n  #elevation = as.numeric(elevation)\n  ) |&gt; # convert from m/s to knots \n  arrange(time) |&gt;\n  # convert from UTC to right timezone\n  mutate(time = lubridate::with_tz(time, tzone = \"America/Nassau\")) |&gt;\n  mutate(date = lubridate::as_date(time)) |&gt;\n  mutate(lat_smooth = runner::runner(lat, k = smoothing_window, idx = time,\n                                   f = function(x) median(x, na.rm = TRUE)),\n         lon_smooth = runner::runner(lon, k = smoothing_window, idx = time,\n                                   f = function(x) median(x, na.rm = TRUE))\n         ) |&gt;\n  mutate(\n    segments_full = track_distance(lat, lon) / 1852, # convert from meters to nm\n    segments_full_smooth = track_distance(lat_smooth, lon_smooth) / 1852, # convert from meters to nm\n  ) \n\ndf$segments_full[1] &lt;- 0\ndf$segments_full_smooth[1] &lt;- 0\ndf &lt;- df |&gt;\n  mutate(dist = cumsum(segments_full) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day = cumsum(segments_full) |&gt; round(digits = 1)) |&gt; \n  ungroup() |&gt;\n  mutate(dist_sm = cumsum(segments_full_smooth) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day_sm = cumsum(segments_full_smooth) |&gt; round(digits = 1)) |&gt; \n  ungroup()\n# some success smoothing GPS points\n# For each point: take all points received within 5 seconds of that point, calculate median of latitude and longitude individually, then use median values as latitude and longitude for that point. This generally gives a straight walk along a sidewalk. For driving, it clips corners, though.\n\n# outlier check\noutlier &lt;- which(df$segments_full &gt; .5)\noutlier_area &lt;- c(outlier, outlier-1) |&gt; sort()\n\ndf_1min &lt;- df |&gt;\n  mutate(time = lubridate::round_date(time, \"1 minute\")) |&gt; \n  group_by(time) |&gt; slice(1) |&gt; ungroup() |&gt;\n  mutate(cog = track_bearing(lon_smooth, lat_smooth),\n        cog = ifelse(cog &lt; 0, cog + 360, cog)) |&gt;\n  mutate(\n    segment = track_distance(lat, lon) / 1852, # convert from meters to nm\n    segment_sm = track_distance(lat_smooth, lon_smooth) / 1852, # convert from meters to nm\n  )\ndf_1min$segment[1] &lt;- 0\ndf_1min$segment_sm[1] &lt;- 0\ndf_1min &lt;- df_1min |&gt;\n  mutate(dist = cumsum(segment) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day = cumsum(segment) |&gt; round(digits = 1)) |&gt; \n  ungroup() |&gt;\n  mutate(dist_sm = cumsum(segment_sm) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day_sm = cumsum(segment_sm) |&gt; round(digits = 1)) |&gt; \n  ungroup()\n\ndf_10min &lt;- df_1min |&gt;\n  mutate(time = lubridate::round_date(time, \"10 minutes\")) |&gt; \n  group_by(time) |&gt; slice(1) |&gt; ungroup() |&gt;\n  mutate(cog10 = track_bearing(lon_smooth, lat_smooth),\n         cog10 = ifelse(cog &lt; 0, cog + 360, cog))\n\n\n\nexample lines\n\n\nCode\nhead(df, 5)\n\n\n# A tibble: 5 × 12\n    lat   lon time                date       lat_smooth lon_smooth segments_full\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt;              &lt;date&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1  25.0 -77.3 2019-04-30 08:07:30 2019-04-30       25.0      -77.3      0       \n2  25.0 -77.3 2019-04-30 08:07:40 2019-04-30       25.0      -77.3      0.0150  \n3  25.0 -77.3 2019-04-30 08:09:05 2019-04-30       25.0      -77.3      0.00144 \n4  25.0 -77.3 2019-04-30 08:13:19 2019-04-30       25.0      -77.3      0.000134\n5  25.0 -77.3 2019-04-30 08:28:21 2019-04-30       25.0      -77.3      0.000992\n# ℹ 5 more variables: segments_full_smooth &lt;dbl&gt;, dist &lt;dbl&gt;, dist_day &lt;dbl&gt;,\n#   dist_sm &lt;dbl&gt;, dist_day_sm &lt;dbl&gt;\n\n\nCode\ntail(df, 5)\n\n\n# A tibble: 5 × 12\n    lat   lon time                date       lat_smooth lon_smooth segments_full\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt;              &lt;date&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1  25.0 -77.3 2019-05-06 18:46:36 2019-05-06       25.0      -77.3      0.000647\n2  25.0 -77.3 2019-05-06 18:47:45 2019-05-06       25.0      -77.3      0.000288\n3  25.0 -77.3 2019-05-06 18:49:20 2019-05-06       25.0      -77.3      0.000243\n4  25.0 -77.3 2019-05-06 18:49:54 2019-05-06       25.0      -77.3      0.000274\n5  25.0 -77.3 2019-05-06 18:52:44 2019-05-06       25.0      -77.3      0.000768\n# ℹ 5 more variables: segments_full_smooth &lt;dbl&gt;, dist &lt;dbl&gt;, dist_day &lt;dbl&gt;,\n#   dist_sm &lt;dbl&gt;, dist_day_sm &lt;dbl&gt;\n\n\nExtract full hour data.\n\n\nCode\ndf_1hour &lt;- df_10min |&gt; mutate(hour = hour(time)) |&gt;\n  group_by(date, hour) |&gt;\n  slice(1) |&gt;\n  ungroup() |&gt; arrange(time)\n  #dplyr::filter(minute(time) == 0, second(time) &lt; 1) \n\n\n\n\n\n\n\nTrip overview\n\nBlue markers are the positions at the full hour for approximate logbook entries.\nRed markers show beginning and end of missing segments.\n\n\nMinute wise dataFull dataSmoothed data\n\n\n\n\nCode\n#cols &lt;- RColorBrewer::brewer.pal(df_1hour$date |&gt; unique() |&gt; length(), \"Set3\")\ncols &lt;- c(\"darkred\", \"orange\", \"lightgreen\", \"darkgreen\", \"cadetblue\", \"blue\", \"purple\")\nnames(cols) &lt;- df_1hour$date |&gt; unique()\n\ndf_1hour &lt;- df_1hour |&gt;\n  mutate(marker_color = unname(cols[as.character(date)]))\n\nicons &lt;- awesomeIcons(\n  icon = 'circle',\n  iconColor = 'white',\n  library = 'fa',\n  markerColor = df_1hour$marker_color\n)\n\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df_1min, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, \n    icon = ~icons, \n    label = ~paste0(as.character(date), \" \",\n                   as.character(hour(time)), \":\", \n                   as.character(minute(time)))) #|&gt;\n\n\n\n\n\n\nCode\n  # leaflet::addAwesomeMarkers(\n  #   data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n  #   label = ~as.character(hour(time)), \n  #   icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n  #                       library = 'ion', markerColor = 'red')) \n\n\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, \n    icon = ~icons, \n    label = ~paste0(as.character(date), \" \",\n               as.character(hour(time)), \":\", \n               as.character(minute(time)))) #|&gt;\n\n\n\n\n\n\nCode\n  # leaflet::addAwesomeMarkers(\n  #   data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n  #   label = ~as.character(hour(time)), \n  #   icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n  #                       library = 'ion', markerColor = 'red'))\n\n\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df, lat = ~lat_smooth, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon,\n    icon = ~icons, \n    label = ~paste0(as.character(date), \" \",\n               as.character(hour(time)), \":\", \n               as.character(minute(time)))) #|&gt;\n\n\n\n\n\n\nCode\n  # leaflet::addAwesomeMarkers(\n  #   data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n  #   label = ~as.character(hour(time)), \n  #   icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n  #                       library = 'ion', markerColor = 'red'))\n\n\n\n\n\n\n\nHourly log book\n\n\nCode\ndf_1hour |&gt;\n  mutate(latitude = deg2dms(lat, type = \"cat\"),\n         longitude = deg2dms(lon, type = \"cat\"),\n         # add distance\n         across(c(dist, cog), \\(x) round(x, 1)) #, kts, \n         ) |&gt;\n  mutate(time = sprintf(\"%02d:%02d\", hour(time), minute(time)),\n         date = str_remove(as.character(date), \"^[0-9]*-\"))|&gt;\n  select(date, time, latitude, longitude, cog, dist_day, dist) |&gt; #, kts, \n  gt::gt() |&gt;\n  gt::opt_interactive(use_text_wrapping = FALSE) |&gt;\n  gt::cols_width(dplyr::any_of(c(\"latitude\", \"longitude\")) ~ gt::px(130))\n\n\n\n\n\n\n\n\n\n\n\nCOG\n\n10 min thinning1 min thinning\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_1min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistance\nChecking Cumulative Miles in total and per day. The full track shows missing segments, marked in red in the full data route above.\n\n10 min thinningfull data\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist_day)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\nmissing segments\n\n\nCode\ndf |&gt;\n  ggplot(aes(x = time, y = segments_full)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\nCode\ndf |&gt;\n  ggplot(aes(x = time, y = segments_full_smooth)) + geom_point() + geom_line()"
  }
]